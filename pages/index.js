import Head from "next/head"
import styles from "../styles/Home.module.css"
import { ThirdwebSDK } from "@3rdweb/sdk"
import { useWeb3 } from "@3rdweb/hooks"
import { useEffect, useMemo, useState } from "react"

export default function Home() {
  const { provider, address, connectWallet, disconnectWallet, balance } =
    useWeb3()
  const [nfts, setNfts] = useState([])
  const [listings, setListings] = useState([])
  const [purchaseConform, setPurchaseConform] = useState(false)

  const Module = useMemo(() => {
    if (!provider) return

    return new ThirdwebSDK(provider.getSigner())
  }, [provider])

  const nftModule = useMemo(() => {
    if (!Module) return
    return Module.getNFTModule("0x12E2e4E79e4755292F5cb2b80a6Dfd30fe7E3Ba9")
  }, [provider])

  const MarketPlaceModule = useMemo(() => {
    if (!Module) return
    return Module.getMarketplaceModule(
      "0xCf776852a17326783565CD77bF3e7502A6e79c2B"
    )
  }, [provider])

  // get all NFTs in the collection
  useEffect(() => {
    if (!nftModule) return
    ;(async () => {
      const nfts = await nftModule.getAll()
      setPurchaseConform(false)
      setNfts(nfts)
    })()
  }, [nftModule, purchaseConform])

  // get all listings(NFTs that are yet to buy)
  useEffect(() => {
    if (!MarketPlaceModule) return
    ;(async () => {
      const listings = await MarketPlaceModule.getAllListings()
      setListings(listings)
    })()
  }, [MarketPlaceModule, purchaseConform])

  const mixed = useMemo(() => {
    let mixedArr = []
    for (let i = 0; i < nfts.length; i++) {
      const foundListing = listings.find(listing => listing.id === nfts[i].id)
      if (foundListing) {
        mixedArr.push({ ...nfts[i], ...foundListing, listing: true })
      } else {
        mixedArr.push(nfts[i])
      }
    }
    console.log("mixedArr", mixedArr)
    return mixedArr
  }, [nfts, listings])

  const purchase = async listingId => {
    if (!MarketPlaceModule) return
    await MarketPlaceModule.buyoutDirectListing({
      listingId,
      quantityDesired: 1,
    }).catch(err => console.log(err))
    setPurchaseConform(true)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!address ? (
          <button onClick={() => connectWallet("injected")}>
            Connect Wallet
          </button>
        ) : (
          <>
            <h1>{address}</h1>
            <p>ethereum:{balance?.formatted}</p>
            <button onClick={() => disconnectWallet("injected")}>
              Disconnect Wallet
            </button>
            <div className="wrapper">
              {mixed.map(nft => (
                <div key={nft.id}>
                  <img src={nft.image} />
                  <p>{nft.name}</p>
                  {nft.listing && (
                    <>
                      <p>{nft?.buyoutCurrencyValuePerToken?.displayValue}</p>
                      <button onClick={() => purchase(nft.id)}>buy now</button>
                    </>
                  )}
                </div>
              ))}
              <style jsx>{`
                .wrapper {
                  display: flex;
                  justify-content: space-evenly;
                  flex-wrap: wrap;
                  align-items: center;
                }
              `}</style>
            </div>
          </>
        )}
      </main>
    </div>
  )
}
